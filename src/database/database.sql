CREATE DATABASE itsdatabase


/* USER'S TABLE */
/*
* ROLE = [STUDENT, TEACHER, ADMIN, SUSER]
! Finish
*/
CREATE TABLE users (
	id int(50) PRIMARY KEY NOT null AUTO_INCREMENT,
    last_name varchar(50),
    name varchar(50),
    cuil varchar(50),
    dir varchar(100),
    phone_number varchar(50),
    birthdate varchar(20),
    age int(20),
    email varchar(200),
    user_name varchar(200),
    pass varchar(200),
    role varchar(20),
    file_number varchar(200)
)

INSERT INTO users(age, birthdate, cuil, dir, email, file_number, last_name, name, pass, phone_number, role, user_name) VALUES(
        32, '27/11/1989', '20348605144', 'Lago Guillelmo 1025', 'roberto27111989@gmail.com', 'xxx', 'Aqueveque', 'Roberto', '123456', '2994582194', 'STUDENT', 'alumno1'
    )

INSERT INTO users(age, birthdate, cuil, dir, email, file_number, last_name, name, pass, phone_number, role, user_name) VALUES(
        (32, '27/11/1989', '20340000004', 'AV. Allem 204', 'matias@gmail.com', 'xxx', 'Orellana', 'Matias', '123456', '2994500000', 'TEACHER', 'profe1')
        (32, '27/11/1989', '20340000004', 'AV. Naciones Unidas 204', 'matias@gmail.com', 'xxx', 'Carrillo', 'Javier', '123456', '2994500000', 'TEACHER', 'profe2')
        (32, '27/11/1989', '20340000004', 'Bolivia 204', 'matias@gmail.com', 'xxx', 'Vagnoni', 'Yanina', '123456', '2994500000', 'TEACHER', 'profe3')
    )

/* CAREER'S TABLE
! Finish
*/
CREATE TABLE career (
	id int(10) PRIMARY KEY NOT null AUTO_INCREMENT,
    career_name varchar(200),
    description varchar(500),
    duration varchar(200)
)

INSERT INTO career(description, duration, career_name) VALUES(
	'Programador Full Stack', '3 años', 'Tecnico Superior en Desarrollo de Software'
)

/* MATERIA'S TABLE 
* ONE MATERIA HAS A ONLY PROFESSOR
! RELATIONAL TABLE
!Finish
*/
CREATE TABLE materia(
	id int(10) PRIMARY key not null AUTO_INCREMENT,
    materia_name varchar(200),
    professor_id int(10),
    actual_year varchar(50),
    classes_quantity int(50),
    career_id int(10),
    FOREIGN KEY (career_id) REFERENCES career(id),
    FOREIGN KEY (professor_id) REFERENCES users(id)
)

INSERT INTO materia(actual_year, career_id, classes_quantity, materia_name, professor_id) VALUES
	('2023', 1, 20, 'Programacion I', 2), 
    ('2023', 1, 20, 'Matematica I', 3), 
    ('2023', 1, 20, 'Ingles I', 4)


/* SCHEDULES'S TABLE 
! Finish
*/
CREATE TABLE schedules (
	id int(10) PRIMARY key not null,
    class_day varchar(20),
    class_schedule varchar(20)
)

INSERT INTO schedules(id, class_day, class_schedule) VALUES
    (21 ,'Lunes', '19:00 a 21:00'),
    (11, 'Lunes', '21:00 a 23:00'),
    (22, 'Martes', '19:00 a 21:00')

/* ATTENDANCE'S TABLE 
* INFORMATION GENERATED BY THE QR
! RELATIONAL TABLE
la materia tiene sus horarios, lo mejor seria colocar eso
para usar: un droplist que muestre las materias del profesor
al hacer click sobre la materia, consultar la tabla materia_has_schedules, que
contiene los horarios de la materia.
con esa info, hacer el qr (el qr tiene que tener el dia)
hacer un timestamp desde el front
! todos estos datos se pueden conseguir
QR generado:
{id: id, day: attendance_day, professor: professor_name, last_name: professor_last_name,materia: materia_name}
! Finish
*/
CREATE TABLE attendance (
	id int(50) PRIMARY key not null AUTO_INCREMENT,
    attendance_date varchar(50),
    professor_id int(10),
    materia_id int(10),
    schedule_id int(10),
    classes_quantity int(10),
    FOREIGN KEY (professor_id) REFERENCES users(id),
    FOREIGN KEY (materia_id) REFERENCES materia(id),
    FOREIGN KEY (schedule_id) REFERENCES schedules(id)
)

INSERT INTO attendance(attendance_date, materia_id, professor_id, schedule_id) VALUES(
	'15/04/2023', 1, 2, 21
)

/*
? TENER EN CUENTA QUE LOS PROFESORES SE BUSCAN EN LAS MATERIAS (nombre y apellido),
? Y LOS ALUMNOS SE BUSCAN EN LAS INSCRIPCIONES (nombre y apellido)
*/

/*
! --------------------------- RELATIONAL TABLES ---------------------------
*/

/* STUDENTS (USERS) ENROLL IN MATERIA 
! Finish
*/
CREATE TABLE inscriptions (
	id int(50) PRIMARY KEY not null AUTO_INCREMENT,
    student_id int(10),
    materia_id int(10),
    FOREIGN KEY (student_id) REFERENCES users(id),
    FOREIGN KEY (materia_id) REFERENCES materia(id)
)

INSERT INTO inscriptions(materia_id, student_id) VALUES
    (1, 1),
    (2, 1),
    (3, 1)

/* CAREER CONTAINS MATERIA 
! Finish
*/
CREATE TABLE career_contains_materia (
	id int(10) PRIMARY KEY not null AUTO_INCREMENT,
    materia_id int(10),
    career_id int(10),
    FOREIGN KEY (materia_id) REFERENCES materia(id),
    FOREIGN KEY (career_id) REFERENCES career(id)
)

INSERT INTO career_contains_materia(career_id, materia_id) VALUES
	(1, 1),
    (1, 2),
    (1, 3)

/* MATERIA HAS SCHEDULES 
! Finish
*/
CREATE TABLE materia_has_schedules (
	id int(10) PRIMARY KEY not null AUTO_INCREMENT,
    materia_id int(10),
    schedule_id int(10),
    FOREIGN KEY (materia_id) REFERENCES materia(id),
    FOREIGN KEY (schedule_id) REFERENCES schedules(id)
)

INSERT INTO materia_has_schedules(materia_id, schedule_id) VALUES
    (1, 21),
    (2, 11),
    (3, 22)

/* SCHEDULE REGISTER ATTENDANCES 
TODO Ver si realmente se necesita registrar el horario con la asistencia! (en la tabla attendance ya se hace eso)
*/
CREATE TABLE schedule_register_attendance (
	id int(50) PRIMARY KEY not null AUTO_INCREMENT,
    schedule_id int(10),
    attendance_id int(50),
    FOREIGN KEY (schedule_id) REFERENCES schedule(id),
    FOREIGN KEY (attendance_id) REFERENCES attendance(id)
)

/* USERS REGISTER ATTENDANCE */
CREATE TABLE user_register_attendance (
	id int(50) PRIMARY KEY not null AUTO_INCREMENT,
    student_id int(50),
    attendance_id int(50),
    FOREIGN KEY (student_id) REFERENCES users(id),
    FOREIGN KEY (attendance_id) REFERENCES attendance(id)
)

INSERT INTO user_register_attendance(attendance_id, student_id) VALUES(
	2, 1
)

/*
! SOME SQL QUERIES
*/

'select * from career C
inner join materia M
on C.id = M.career_id
order by C.id'



OBTERNER TODAS LAS ASISTENCIAS DEL ALUMNO 
SELECT a.id AS attendance_id, 
    career_id, 
    a.professor_id, 
    ura.student_id, 
    a.materia_id, 
    attendance_date, 
    materia_name, 
    actual_year, 
    m.classes_quantity, 
    u.name AS professor, 
    u.last_name AS professor_last_name, 
    c.career_name 
FROM attendance a
INNER JOIN materia m ON a.materia_id = m.id
INNER JOIN career c ON m.career_id = c.id
INNER JOIN users u ON m.professor_id = u.id
INNER JOIN user_register_attendance ura ON ura.attendance_id = a.id
INNER JOIN inscriptions i ON ura.student_id = i.student_id AND m.id = i.materia_id
WHERE ura.student_id = 1 AND attendance_date LIKE '%24' ---------------> esta clausula es para filtrar por años
ORDER BY materia_name

ESTA ES UNA VARIACION, PODEMOS OBTENER MATERIA POR MATERIA, PERO SERIAN VARIAS CONSULTAS,
DEPENDIENDO DE LA CANTIDAD DE MATERIAS A LA QUE ESTE INSCRIPTO
SELECT A.id AS attendance_id, 
    career_id, 
    A.professor_id, 
    URA.student_id, 
    A.materia_id, 
    attendance_date, 
    materia_name, 
    actual_year, 
    M.classes_quantity AS total_classes,
    A.classes_quantity,
    U.name AS professor,
    U.last_name AS professor_last_name,
    C.career_name 
FROM attendance A
INNER JOIN materia M ON A.materia_id = M.id
INNER JOIN career C ON M.career_id = C.id
INNER JOIN users U ON M.professor_id = U.id
INNER JOIN user_register_attendance URA ON URA.attendance_id = A.id
INNER JOIN inscriptions I ON ura.student_id = I.student_id AND M.id = I.materia_id
WHERE URA.student_id = 1 AND attendance_date LIKE '%23' AND M.id = 1